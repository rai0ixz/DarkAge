#pragma once

#include "CoreMinimal.h"
#include "Engine/DataTable.h"
#include "PropertyData.generated.h"

/**
 * Defines the type of property.
 * Used for categorization and specific logic handling.
 */
UENUM(BlueprintType)
enum class EDGPropertyType : uint8
{
    House       UMETA(DisplayName = "House"),           // Residential building
    Shop        UMETA(DisplayName = "Shop"),            // Commercial retail space
    Warehouse   UMETA(DisplayName = "Warehouse"),       // Storage facility
    Farm        UMETA(DisplayName = "Farm"),            // Agricultural land
    Inn         UMETA(DisplayName = "Inn"),             // Lodging and tavern
    Workshop    UMETA(DisplayName = "Workshop"),        // Crafting and production facility
    Mine        UMETA(DisplayName = "Mine"),            // Resource extraction site
    Land        UMETA(DisplayName = "Land"),            // Undeveloped plot of land
    Castle      UMETA(DisplayName = "Castle"),          // Fortified residence, seat of power
    Tavern      UMETA(DisplayName = "Tavern"),          // Place for drink and social gathering (distinct from Inn if needed)
    LumberMill  UMETA(DisplayName = "Lumber Mill"),     // Processes wood
    Quarry      UMETA(DisplayName = "Quarry"),          // Stone extraction
    Estate      UMETA(DisplayName = "Estate"),          // Large residential property with land
    GuildHall   UMETA(DisplayName = "Guild Hall"),      // Headquarters for a guild
    Temple      UMETA(DisplayName = "Temple"),          // Place of worship
    Port        UMETA(DisplayName = "Port"),            // Docks and maritime facilities
    Unknown     UMETA(DisplayName = "Unknown")          // Default or undefined
};

/** Helper struct for replicating AdditionalData TMap within FOwnedPropertyDetails */
USTRUCT(BlueprintType)
struct DARKAGE_API FAdditionalDataPair
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Data")
    FString Key;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Data")
    FString Value;

    FAdditionalDataPair() : Key(TEXT("")), Value(TEXT("")) {}
    FAdditionalDataPair(const FString& InKey, const FString& InValue) : Key(InKey), Value(InValue) {}
};

/**
 * Defines details about a specific owned property.
 */
USTRUCT(BlueprintType)
struct DARKAGE_API FOwnedPropertyDetails
{
    GENERATED_BODY()

    // Unique ID for this property instance
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    FGuid PropertyID;

    // Type of the property
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    EDGPropertyType PropertyType;

    // Name of the property (e.g., "The Prancing Pony", "Blackwood Farm")
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    FString PropertyName;

    // The region this property belongs to
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    FString RegionID;

    // Location of the property in the world
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    FVector Location;

    // Current market value of the property
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    float CurrentValue;

    // Income generated by the property (per game day/week)
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    float IncomeGenerated;

    // Upkeep cost for the property (per game day/week)
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    float UpkeepCost;

    // Condition of the property (0.0 to 1.0, where 1.0 is perfect condition)
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details", meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float Condition;

    // Current upgrade level of the property
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    int32 UpgradeLevel;

    // Date the property was acquired
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    FDateTime AcquisitionDate;

    // IDs of NPCs currently residing or working at the property
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    TArray<FString> OccupantIDs;

    // Current status (e.g., "Active", "Under Construction", "Abandoned", "For Sale")
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    FString Status;

    // Additional data, like resources produced, storage capacity etc.
    // Changed from TMap to TArray of a helper struct for replication.
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Property Details")
    TArray<FAdditionalDataPair> AdditionalData;

    FORCEINLINE FOwnedPropertyDetails()
        : PropertyID()
        , PropertyType(EDGPropertyType::Unknown)
        , PropertyName(TEXT(""))
        , RegionID(TEXT(""))
        , Location(FVector::ZeroVector)
        , CurrentValue(0.0f)
        , IncomeGenerated(0.0f)
        , UpkeepCost(0.0f)
        , Condition(1.0f)
        , UpgradeLevel(0)
        , AcquisitionDate(FDateTime::MinValue())
        , Status(TEXT(""))
    {
    }
};

/**
 * Defines details for a business operation (could be tied to a property).
 */
USTRUCT(BlueprintType)
struct DARKAGE_API FBusinessDetails
{
    GENERATED_BODY()

    // Unique ID for this business
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    FGuid BusinessID;

    // Type of business (e.g., "Blacksmith", "Bakery", "Mercenary Guild")
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    FString BusinessType;

    // Name of the business
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    FString BusinessName;

    // Current level of the business
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    int32 BusinessLevel;

    // Property ID this business is associated with (if any)
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    FGuid AssociatedPropertyID;


    // Number of employees
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    int32 NumberOfEmployees;

    // Weekly profit/loss
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    float WeeklyProfit;

    // Current inventory value (if applicable)
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    float InventoryValue;

    // Customer satisfaction rating (0.0 to 1.0)
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details", meta = (ClampMin = "0.0", ClampMax = "1.0"))
    float CustomerSatisfaction;

    // List of services or goods offered
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    TArray<FString> ServicesOffered;

    // Region where the business is located
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Business Details")
    FString RegionID;

    FORCEINLINE FBusinessDetails()
        : BusinessID()
        , BusinessType(TEXT(""))
        , BusinessName(TEXT(""))
        , BusinessLevel(0)
        , AssociatedPropertyID(FGuid())
        , NumberOfEmployees(0)
        , WeeklyProfit(0.0f)
        , InventoryValue(0.0f)
        , CustomerSatisfaction(0.5f)
        , RegionID(TEXT(""))
    {
    }
};